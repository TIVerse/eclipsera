[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "eclipsera"
dynamic = ["version"]
description = "A production-grade machine learning framework with AutoML, explainability, and deployment tooling"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Eshan Roy", email = "eshanized@proton.me"}
]
maintainers = [
    {name = "Tonmoy Infrastructure & Vision"}
]
keywords = [
    "machine-learning", "deep-learning", "automl", "explainability",
    "scikit-learn", "neural-networks", "deployment", "mlops",
    "time-series", "nlp", "computer-vision", "federated-learning"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed"
]
requires-python = ">=3.12"
dependencies = [
    "numpy>=1.24",
    "scipy>=1.10",
    "pandas>=2.0",
    "joblib>=1.3",
    "numba>=0.57",
    "tqdm>=4.65",
    "matplotlib>=3.7",
    "scikit-learn>=1.3",
    "pyyaml>=6.0",
    "requests>=2.31",
    "typing-extensions>=4.8"
]

[project.optional-dependencies]
nn = [
    "torch>=2.0",
    "torchvision>=0.15"
]
automl = [
    "optuna>=3.3",
    "ray[tune]>=2.7"
]
explain = [
    "shap>=0.42",
    "lime>=0.2.0.1"
]
nlp = [
    "transformers>=4.33",
    "tokenizers>=0.14",
    "sentencepiece>=0.1.99"
]
vision = [
    "opencv-python>=4.8",
    "albumentations>=1.3",
    "pillow>=10.0"
]
distributed = [
    "dask[complete]>=2023.9.0",
    "ray>=2.7"
]
gpu = [
    "cupy-cuda11x>=12.0"
]
serving = [
    "fastapi>=0.103",
    "uvicorn[standard]>=0.23",
    "pydantic>=2.4",
    "grpcio>=1.58",
    "grpcio-tools>=1.58"
]
deployment = [
    "onnx>=1.14",
    "onnxruntime>=1.16",
    "mlflow>=2.7"
]
dev = [
    "pytest>=7.4",
    "pytest-cov>=4.1",
    "pytest-xdist>=3.3",
    "black>=23.9",
    "isort>=5.12",
    "flake8>=6.1",
    "mypy>=1.5",
    "pre-commit>=3.4",
    "sphinx>=7.2",
    "sphinx-rtd-theme>=1.3",
    "furo>=2023.9.10",
    "nbsphinx>=0.9",
    "ipython>=8.15",
    "jupyter>=1.0"
]
all = [
    "torch>=2.0",
    "torchvision>=0.15",
    "optuna>=3.3",
    "ray[tune]>=2.7",
    "shap>=0.42",
    "lime>=0.2.0.1",
    "transformers>=4.33",
    "tokenizers>=0.14",
    "sentencepiece>=0.1.99",
    "opencv-python>=4.8",
    "albumentations>=1.3",
    "pillow>=10.0",
    "dask[complete]>=2023.9.0",
    "cupy-cuda11x>=12.0",
    "fastapi>=0.103",
    "uvicorn[standard]>=0.23",
    "pydantic>=2.4",
    "grpcio>=1.58",
    "grpcio-tools>=1.58",
    "onnx>=1.14",
    "onnxruntime>=1.16",
    "mlflow>=2.7"
]

[project.urls]
Homepage = "https://github.com/tiverse/eclipsera"
Documentation = "https://eclipsera.readthedocs.io"
Repository = "https://github.com/tiverse/eclipsera"
Issues = "https://github.com/tiverse/eclipsera/issues"
Changelog = "https://github.com/tiverse/eclipsera/blob/main/CHANGELOG.md"

[project.scripts]
eclipsera = "eclipsera.cli.main:main"

[tool.setuptools.dynamic]
version = {attr = "eclipsera.__version__.__version__"}

[tool.setuptools.packages.find]
include = ["eclipsera*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
eclipsera = ["py.typed"]

[tool.black]
line-length = 100
target-version = ["py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_gitignore = true

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
check_untyped_defs = true
strict_equality = true
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=eclipsera",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=75"
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gpu: marks tests requiring GPU",
    "integration: marks integration tests"
]

[tool.coverage.run]
source = ["eclipsera"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/site-packages/*"
]

[tool.coverage.report]
precision = 2
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]
